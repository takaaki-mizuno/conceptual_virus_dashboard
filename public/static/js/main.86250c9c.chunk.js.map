{"version":3,"sources":["repositories/Creatures.ts","components/Trend.tsx","components/Creature.tsx","containers/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GetCreatures","a","fetch","method","response","console","log","ok","json","data","creatures","Promise","reject","Trends","props","dataSet","backgroundColor","chartData","labels","datasets","hash","trends","push","color","Number","charCodeAt","toString","type","Creature","className","style","padding","ipAddress","total_count","viruses","Dashboard","React","setCreatures","then","intervalId","setInterval","catch","err","clearInterval","creatureElements","i","length","creature","ip_address","idString","id","sm","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAAO,SAAeA,IAAtB,+B,4CAAO,gCAAAC,EAAA,+EAEwBC,MAAM,2CAA4C,CACrEC,OAAQ,QAHb,UAEOC,EAFP,OAMCC,QAAQC,IAAIF,IACRA,EAASG,GAPd,iCAQwBH,EAASI,OARjC,UAQWC,EARX,SASWC,EATX,OASuBD,QATvB,IASuBA,OATvB,EASuBA,EAAMC,WAT7B,0CAWgBA,GAXhB,yCAgBY,IAhBZ,2GAmBQC,QAAQC,OAAR,OAnBR,2D,yCCmBMC,EAAS,SAACC,GACnB,IAAMC,EAAmB,CACrBC,gBAAiB,GACjBP,KAAM,IAEJQ,EAAuB,CACzBC,OAAQ,GACRC,SAAU,IAGd,IAAK,IAAIC,KAAQN,EAAMO,OAAQ,CAC3BJ,EAAUC,OAAOI,KAAKF,GACtB,IAAMG,EAAgBC,OAAOJ,EAAKK,WAAW,IAAIC,SAAS,IACtDF,OAAOJ,EAAKK,WAAW,IAAIC,SAAS,IACpCF,OAAOJ,EAAKK,WAAW,IAAIC,SAAS,IAExCX,EAAQC,gBAAgBM,KAAK,IAAIC,GACjCR,EAAQN,KAAKa,KAAKR,EAAMO,OAAOD,IAInC,OAFAH,EAAUE,SAASG,KAAKP,GACxBV,QAAQC,IAAIW,GAER,cAAC,IAAD,CACIU,KAAK,WACLlB,KAAMQ,K,QC3BLW,EAAW,SAACd,GACrB,OACI,eAAC,IAAD,CAAOe,UAAU,OAAOC,MAAO,CAACC,QAAS,QAAzC,UACI,cAAC,IAAD,CAAaD,MAAO,CAACC,QAAS,QAA9B,SACI,6BAAKjB,EAAMkB,cAEf,cAAC,IAAD,CAAWF,MAAO,CAACC,QAAS,QAA5B,SACA,cAAC,EAAD,CAAQE,YAAanB,EAAMoB,QAAQD,YAAaZ,OAAQP,EAAMoB,QAAQb,WAEtE,cAAC,IAAD,CAAaS,MAAO,CAACC,QAAS,QAA9B,SACI,kDAAqBjB,EAAMoB,QAAQD,qBChBtCE,EAA6B,WACtC,MAAkCC,aAAlC,mBAAO1B,EAAP,KAAkB2B,EAAlB,KAEAD,aAAgB,WAEZpC,IAAesC,MACX,SAAC5B,GACOA,GACA2B,EAAa3B,MAIzB,IAAM6B,EAAaC,aAAY,WAC3BxC,IAAesC,MACX,SAAC5B,GACOA,GACA2B,EAAa3B,MAGvB+B,OAAM,SAAAC,GACJrC,QAAQC,IAAIoC,QAhBH,KAmBjB,OAAO,WACHC,cAAcJ,MAEnB,IAEH,IAAIK,EAAmB,GACvB,GAAIlC,EACA,IAAK,IAAImC,EAAI,EAAGA,EAAInC,EAAUoC,OAAQD,IAAK,CACvC,IAAME,EAAWrC,EAAUmC,GAC3BD,EAAiBtB,KAAK,cAAC,EAAD,CAAqCU,UAAWe,EAASC,WACtCC,SAAUF,EAASG,GAAIhB,QAASa,EAASb,SADpCa,EAASG,KAK/D,OACI,eAAC,IAAD,WACI,oBAAIrB,UAAU,QAAd,uBACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAOsB,GAAG,OAAV,SACKP,UChCNQ,MAVf,WACE,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,WCAxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.86250c9c.chunk.js","sourcesContent":["export async function GetCreatures() {\n    try {\n        const response = await fetch('http://localhost/api/dashboard/creatures', {\n            method: 'GET',\n//            mode: 'no-cors'\n        })\n        console.log(response)\n        if (response.ok) {\n            const data = await response.json()\n            const creatures = data?.creatures\n            if (creatures) {\n                return creatures\n            } else {\n                return [] //Promise.reject(new Error('Something Wrong'))\n            }\n        } else {\n            return []\n        }\n    } catch( err) {\n        return Promise.reject(err)\n    }\n\n}\n","import * as React from 'react';\nimport { CChart } from '@coreui/react-chartjs'\n\n\ninterface TrendsProps {\n    total_count: number,\n    trends: { [name: string]: number },\n}\n\ninterface DataSet {\n    backgroundColor: Array<string>,\n    data: Array<number>,\n}\n\ninterface ChartData {\n    labels: Array<string>,\n    datasets: Array<DataSet>,\n}\n\nexport const Trends = (props: TrendsProps) => {\n    const dataSet: DataSet = {\n        backgroundColor: [],\n        data: [],\n    };\n    const chartData: ChartData = {\n        labels: [],\n        datasets: [],\n    };\n\n    for (let hash in props.trends) {\n        chartData.labels.push(hash);\n        const color: string = Number(hash.charCodeAt(0)).toString(16) +\n            Number(hash.charCodeAt(1)).toString(16) +\n            Number(hash.charCodeAt(2)).toString(16);\n\n        dataSet.backgroundColor.push(\"#\"+color);\n        dataSet.data.push(props.trends[hash]);\n    }\n    chartData.datasets.push(dataSet);\n    console.log(chartData);\n    return (\n        <CChart\n            type=\"doughnut\"\n            data={chartData}\n        />\n    );\n}\n","import * as React from 'react';\nimport {Trends} from \"./Trend\";\nimport {CCard, CCardHeader,CCardBody, CCardFooter} from '@coreui/react'\n\n\ninterface VirusProps {\n    total_count: number,\n    trends:{ [name: string]: number},\n}\n\ninterface CreatureProps {\n    ipAddress: string,\n    idString: string,\n    viruses: VirusProps\n}\n\nexport const Creature = (props: CreatureProps) => {\n    return (\n        <CCard className=\"mb-4\" style={{padding: \"20px\"}}>\n            <CCardHeader style={{padding: \"20px\"}}>\n                <h3>{props.ipAddress}</h3>\n            </CCardHeader>\n            <CCardBody style={{padding: \"20px\"}}>\n            <Trends total_count={props.viruses.total_count} trends={props.viruses.trends}/>\n            </CCardBody>\n            <CCardFooter style={{padding: \"20px\"}}>\n                <p> Total Variants: {props.viruses.total_count}</p>\n            </CCardFooter>\n\n        </CCard>\n    );\n}\n","import * as React from 'react';\nimport {GetCreatures} from '../repositories/Creatures'\nimport {Creature as CreatureComponent} from \"../components\";\nimport {CreatureEntity} from \"../models\"\nimport {CCard, CContainer, CRow, CCol} from '@coreui/react'\n\n\ninterface Props {\n}\n\nexport const Dashboard: React.FC<Props> = () => {\n    const [creatures, setCreatures] = React.useState<[CreatureEntity]>();\n\n    React.useEffect(() => {\n        const interval = 1000 * 60;\n        GetCreatures().then(\n            (creatures) => {\n                if (creatures) {\n                    setCreatures(creatures)\n                }\n            }\n        )\n        const intervalId = setInterval(() => {\n            GetCreatures().then(\n                (creatures) => {\n                    if (creatures) {\n                        setCreatures(creatures)\n                    }\n                }\n            ).catch(err => {\n                console.log(err)\n            })\n        }, interval);\n        return () => {\n            clearInterval(intervalId)\n        };\n    }, []);\n\n    let creatureElements = []\n    if (creatures) {\n        for (let i = 0; i < creatures.length; i++) {\n            const creature = creatures[i];\n            creatureElements.push(<CreatureComponent key={creature.id} ipAddress={creature.ip_address}\n                                                     idString={creature.id} viruses={creature.viruses}/>)\n        }\n    }\n\n    return (\n        <CContainer>\n            <h1 className=\"title\">Dashboard</h1>\n            <CRow>\n                <CCol  sm=\"auto\">\n                    {creatureElements}\n                </CCol>\n            </CRow>\n        </CContainer>\n    );\n}\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Routes\n} from \"react-router-dom\";\nimport './App.css';\nimport {Dashboard} from \"./containers\"\n\n\nfunction App() {\n  return (\n      <Router>\n          <Routes>\n              <Route path=\"/\" element={<Dashboard />} />\n          </Routes>\n      </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/bulma.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}